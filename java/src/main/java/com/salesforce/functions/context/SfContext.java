/*
 * OpenAPI Schema for Salesforce Functions invocation contexts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.salesforce.functions.context;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.salesforce.functions.context.UserContext;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Salesforce context information
 */
@ApiModel(description = "Salesforce context information")
@JsonPropertyOrder({
  SfContext.JSON_PROPERTY_API_VERSION,
  SfContext.JSON_PROPERTY_PAYLOAD_VERSION,
  SfContext.JSON_PROPERTY_USER_CONTEXT
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-10T17:43:03.907379-07:00[America/Denver]")
public class SfContext {
  public static final String JSON_PROPERTY_API_VERSION = "apiVersion";
  private String apiVersion;

  public static final String JSON_PROPERTY_PAYLOAD_VERSION = "payloadVersion";
  private String payloadVersion;

  public static final String JSON_PROPERTY_USER_CONTEXT = "userContext";
  private UserContext userContext;

  public SfContext() { 
  }

  public SfContext apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

   /**
   * Salesforce API Version in form like: 53.0
   * @return apiVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Salesforce API Version in form like: 53.0")
  @JsonProperty(JSON_PROPERTY_API_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApiVersion() {
    return apiVersion;
  }


  @JsonProperty(JSON_PROPERTY_API_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public SfContext payloadVersion(String payloadVersion) {
    this.payloadVersion = payloadVersion;
    return this;
  }

   /**
   * Payload version indicating JSON-format
   * @return payloadVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Payload version indicating JSON-format")
  @JsonProperty(JSON_PROPERTY_PAYLOAD_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPayloadVersion() {
    return payloadVersion;
  }


  @JsonProperty(JSON_PROPERTY_PAYLOAD_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayloadVersion(String payloadVersion) {
    this.payloadVersion = payloadVersion;
  }


  public SfContext userContext(UserContext userContext) {
    this.userContext = userContext;
    return this;
  }

   /**
   * Get userContext
   * @return userContext
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_USER_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UserContext getUserContext() {
    return userContext;
  }


  @JsonProperty(JSON_PROPERTY_USER_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserContext(UserContext userContext) {
    this.userContext = userContext;
  }


  /**
   * Return true if this sfContext object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SfContext sfContext = (SfContext) o;
    return Objects.equals(this.apiVersion, sfContext.apiVersion) &&
        Objects.equals(this.payloadVersion, sfContext.payloadVersion) &&
        Objects.equals(this.userContext, sfContext.userContext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, payloadVersion, userContext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SfContext {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    payloadVersion: ").append(toIndentedString(payloadVersion)).append("\n");
    sb.append("    userContext: ").append(toIndentedString(userContext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

