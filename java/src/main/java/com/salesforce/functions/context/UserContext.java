/*
 * OpenAPI Schema for Salesforce Functions invocation contexts
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.salesforce.functions.context;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Salesforce user/org context information
 */
@ApiModel(description = "Salesforce user/org context information")
@JsonPropertyOrder({
  UserContext.JSON_PROPERTY_ORG_ID,
  UserContext.JSON_PROPERTY_USER_ID,
  UserContext.JSON_PROPERTY_ON_BEHALF_OF_USER_ID,
  UserContext.JSON_PROPERTY_USERNAME,
  UserContext.JSON_PROPERTY_SALESFORCE_BASE_URL,
  UserContext.JSON_PROPERTY_ORG_DOMAIN_URL
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-11T09:34:01.344279-07:00[America/Denver]")
public class UserContext {
  public static final String JSON_PROPERTY_ORG_ID = "orgId";
  private String orgId;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  public static final String JSON_PROPERTY_ON_BEHALF_OF_USER_ID = "onBehalfOfUserId";
  private String onBehalfOfUserId;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_SALESFORCE_BASE_URL = "salesforceBaseUrl";
  private URI salesforceBaseUrl;

  public static final String JSON_PROPERTY_ORG_DOMAIN_URL = "orgDomainUrl";
  private URI orgDomainUrl;

  public UserContext() { 
  }

  public UserContext orgId(String orgId) {
    this.orgId = orgId;
    return this;
  }

   /**
   * 18-character unique Org identifier
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "18-character unique Org identifier")
  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOrgId() {
    return orgId;
  }


  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrgId(String orgId) {
    this.orgId = orgId;
  }


  public UserContext userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * 18-character unique User identifier
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "18-character unique User identifier")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(String userId) {
    this.userId = userId;
  }


  public UserContext onBehalfOfUserId(String onBehalfOfUserId) {
    this.onBehalfOfUserId = onBehalfOfUserId;
    return this;
  }

   /**
   * Optional 18-character unique User identifier invoked-on-behalf-of
   * @return onBehalfOfUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional 18-character unique User identifier invoked-on-behalf-of")
  @JsonProperty(JSON_PROPERTY_ON_BEHALF_OF_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOnBehalfOfUserId() {
    return onBehalfOfUserId;
  }


  @JsonProperty(JSON_PROPERTY_ON_BEHALF_OF_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnBehalfOfUserId(String onBehalfOfUserId) {
    this.onBehalfOfUserId = onBehalfOfUserId;
  }


  public UserContext username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Unique username
   * @return username
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique username")
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsername(String username) {
    this.username = username;
  }


  public UserContext salesforceBaseUrl(URI salesforceBaseUrl) {
    this.salesforceBaseUrl = salesforceBaseUrl;
    return this;
  }

   /**
   * Base URL of Salesforce appserver that invoked function
   * @return salesforceBaseUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Base URL of Salesforce appserver that invoked function")
  @JsonProperty(JSON_PROPERTY_SALESFORCE_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getSalesforceBaseUrl() {
    return salesforceBaseUrl;
  }


  @JsonProperty(JSON_PROPERTY_SALESFORCE_BASE_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSalesforceBaseUrl(URI salesforceBaseUrl) {
    this.salesforceBaseUrl = salesforceBaseUrl;
  }


  public UserContext orgDomainUrl(URI orgDomainUrl) {
    this.orgDomainUrl = orgDomainUrl;
    return this;
  }

   /**
   * MyDomain URL of Salesforce appserver that invoked function
   * @return orgDomainUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MyDomain URL of Salesforce appserver that invoked function")
  @JsonProperty(JSON_PROPERTY_ORG_DOMAIN_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getOrgDomainUrl() {
    return orgDomainUrl;
  }


  @JsonProperty(JSON_PROPERTY_ORG_DOMAIN_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrgDomainUrl(URI orgDomainUrl) {
    this.orgDomainUrl = orgDomainUrl;
  }


  /**
   * Return true if this userContext object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserContext userContext = (UserContext) o;
    return Objects.equals(this.orgId, userContext.orgId) &&
        Objects.equals(this.userId, userContext.userId) &&
        Objects.equals(this.onBehalfOfUserId, userContext.onBehalfOfUserId) &&
        Objects.equals(this.username, userContext.username) &&
        Objects.equals(this.salesforceBaseUrl, userContext.salesforceBaseUrl) &&
        Objects.equals(this.orgDomainUrl, userContext.orgDomainUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgId, userId, onBehalfOfUserId, username, salesforceBaseUrl, orgDomainUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserContext {\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    onBehalfOfUserId: ").append(toIndentedString(onBehalfOfUserId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    salesforceBaseUrl: ").append(toIndentedString(salesforceBaseUrl)).append("\n");
    sb.append("    orgDomainUrl: ").append(toIndentedString(orgDomainUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

