/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sffxschema

import (
	"encoding/json"
	"time"
)

// SfFnContext Salesforce Function invocation context information
type SfFnContext struct {
	// In-band access token to use for local Functions testing, not populated in production calls
	AccessToken *string `json:"accessToken,omitempty"`
	// Unique function invocation identifier, only populated for async function invocations
	FunctionInvocationId *string `json:"functionInvocationId,omitempty"`
	// (internal use only)
	ProxyClientToken *string `json:"proxyClientToken,omitempty"`
	// Qualified function name in the form <project>.<fnname> or <namespace>.<project>.<fnname>
	FunctionName string `json:"functionName"`
	// Unique Apex class identifier that invoked this function
	ApexId *string `json:"apexId,omitempty"`
	// Apex qualified name that invoked this function in the form Pathname/filename.cls:linenum
	ApexFQN *string `json:"apexFQN,omitempty"`
	// Unique function request identifier
	RequestId string `json:"requestId"`
	// Resource identifier of function being invoked
	Resource *string `json:"resource,omitempty"`
	// (internal use only)
	AsyncResponseCallbackPath *string `json:"asyncResponseCallbackPath,omitempty"`
	// Deadline datetime (UTC) prior to which the Function request must complete: yyyy-MM-dd'T'HH:mm:ssZ
	Deadline *time.Time `json:"deadline,omitempty"`
}

// NewSfFnContext instantiates a new SfFnContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSfFnContext(functionName string, requestId string) *SfFnContext {
	this := SfFnContext{}
	this.FunctionName = functionName
	this.RequestId = requestId
	return &this
}

// NewSfFnContextWithDefaults instantiates a new SfFnContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSfFnContextWithDefaults() *SfFnContext {
	this := SfFnContext{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *SfFnContext) GetAccessToken() string {
	if o == nil || o.AccessToken == nil {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetAccessTokenOk() (*string, bool) {
	if o == nil || o.AccessToken == nil {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *SfFnContext) HasAccessToken() bool {
	if o != nil && o.AccessToken != nil {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *SfFnContext) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetFunctionInvocationId returns the FunctionInvocationId field value if set, zero value otherwise.
func (o *SfFnContext) GetFunctionInvocationId() string {
	if o == nil || o.FunctionInvocationId == nil {
		var ret string
		return ret
	}
	return *o.FunctionInvocationId
}

// GetFunctionInvocationIdOk returns a tuple with the FunctionInvocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetFunctionInvocationIdOk() (*string, bool) {
	if o == nil || o.FunctionInvocationId == nil {
		return nil, false
	}
	return o.FunctionInvocationId, true
}

// HasFunctionInvocationId returns a boolean if a field has been set.
func (o *SfFnContext) HasFunctionInvocationId() bool {
	if o != nil && o.FunctionInvocationId != nil {
		return true
	}

	return false
}

// SetFunctionInvocationId gets a reference to the given string and assigns it to the FunctionInvocationId field.
func (o *SfFnContext) SetFunctionInvocationId(v string) {
	o.FunctionInvocationId = &v
}

// GetProxyClientToken returns the ProxyClientToken field value if set, zero value otherwise.
func (o *SfFnContext) GetProxyClientToken() string {
	if o == nil || o.ProxyClientToken == nil {
		var ret string
		return ret
	}
	return *o.ProxyClientToken
}

// GetProxyClientTokenOk returns a tuple with the ProxyClientToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetProxyClientTokenOk() (*string, bool) {
	if o == nil || o.ProxyClientToken == nil {
		return nil, false
	}
	return o.ProxyClientToken, true
}

// HasProxyClientToken returns a boolean if a field has been set.
func (o *SfFnContext) HasProxyClientToken() bool {
	if o != nil && o.ProxyClientToken != nil {
		return true
	}

	return false
}

// SetProxyClientToken gets a reference to the given string and assigns it to the ProxyClientToken field.
func (o *SfFnContext) SetProxyClientToken(v string) {
	o.ProxyClientToken = &v
}

// GetFunctionName returns the FunctionName field value
func (o *SfFnContext) GetFunctionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetFunctionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FunctionName, true
}

// SetFunctionName sets field value
func (o *SfFnContext) SetFunctionName(v string) {
	o.FunctionName = v
}

// GetApexId returns the ApexId field value if set, zero value otherwise.
func (o *SfFnContext) GetApexId() string {
	if o == nil || o.ApexId == nil {
		var ret string
		return ret
	}
	return *o.ApexId
}

// GetApexIdOk returns a tuple with the ApexId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetApexIdOk() (*string, bool) {
	if o == nil || o.ApexId == nil {
		return nil, false
	}
	return o.ApexId, true
}

// HasApexId returns a boolean if a field has been set.
func (o *SfFnContext) HasApexId() bool {
	if o != nil && o.ApexId != nil {
		return true
	}

	return false
}

// SetApexId gets a reference to the given string and assigns it to the ApexId field.
func (o *SfFnContext) SetApexId(v string) {
	o.ApexId = &v
}

// GetApexFQN returns the ApexFQN field value if set, zero value otherwise.
func (o *SfFnContext) GetApexFQN() string {
	if o == nil || o.ApexFQN == nil {
		var ret string
		return ret
	}
	return *o.ApexFQN
}

// GetApexFQNOk returns a tuple with the ApexFQN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetApexFQNOk() (*string, bool) {
	if o == nil || o.ApexFQN == nil {
		return nil, false
	}
	return o.ApexFQN, true
}

// HasApexFQN returns a boolean if a field has been set.
func (o *SfFnContext) HasApexFQN() bool {
	if o != nil && o.ApexFQN != nil {
		return true
	}

	return false
}

// SetApexFQN gets a reference to the given string and assigns it to the ApexFQN field.
func (o *SfFnContext) SetApexFQN(v string) {
	o.ApexFQN = &v
}

// GetRequestId returns the RequestId field value
func (o *SfFnContext) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *SfFnContext) SetRequestId(v string) {
	o.RequestId = v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *SfFnContext) GetResource() string {
	if o == nil || o.Resource == nil {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetResourceOk() (*string, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *SfFnContext) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *SfFnContext) SetResource(v string) {
	o.Resource = &v
}

// GetAsyncResponseCallbackPath returns the AsyncResponseCallbackPath field value if set, zero value otherwise.
func (o *SfFnContext) GetAsyncResponseCallbackPath() string {
	if o == nil || o.AsyncResponseCallbackPath == nil {
		var ret string
		return ret
	}
	return *o.AsyncResponseCallbackPath
}

// GetAsyncResponseCallbackPathOk returns a tuple with the AsyncResponseCallbackPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetAsyncResponseCallbackPathOk() (*string, bool) {
	if o == nil || o.AsyncResponseCallbackPath == nil {
		return nil, false
	}
	return o.AsyncResponseCallbackPath, true
}

// HasAsyncResponseCallbackPath returns a boolean if a field has been set.
func (o *SfFnContext) HasAsyncResponseCallbackPath() bool {
	if o != nil && o.AsyncResponseCallbackPath != nil {
		return true
	}

	return false
}

// SetAsyncResponseCallbackPath gets a reference to the given string and assigns it to the AsyncResponseCallbackPath field.
func (o *SfFnContext) SetAsyncResponseCallbackPath(v string) {
	o.AsyncResponseCallbackPath = &v
}

// GetDeadline returns the Deadline field value if set, zero value otherwise.
func (o *SfFnContext) GetDeadline() time.Time {
	if o == nil || o.Deadline == nil {
		var ret time.Time
		return ret
	}
	return *o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfFnContext) GetDeadlineOk() (*time.Time, bool) {
	if o == nil || o.Deadline == nil {
		return nil, false
	}
	return o.Deadline, true
}

// HasDeadline returns a boolean if a field has been set.
func (o *SfFnContext) HasDeadline() bool {
	if o != nil && o.Deadline != nil {
		return true
	}

	return false
}

// SetDeadline gets a reference to the given time.Time and assigns it to the Deadline field.
func (o *SfFnContext) SetDeadline(v time.Time) {
	o.Deadline = &v
}

func (o SfFnContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessToken != nil {
		toSerialize["accessToken"] = o.AccessToken
	}
	if o.FunctionInvocationId != nil {
		toSerialize["functionInvocationId"] = o.FunctionInvocationId
	}
	if o.ProxyClientToken != nil {
		toSerialize["proxyClientToken"] = o.ProxyClientToken
	}
	if true {
		toSerialize["functionName"] = o.FunctionName
	}
	if o.ApexId != nil {
		toSerialize["apexId"] = o.ApexId
	}
	if o.ApexFQN != nil {
		toSerialize["apexFQN"] = o.ApexFQN
	}
	if true {
		toSerialize["requestId"] = o.RequestId
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.AsyncResponseCallbackPath != nil {
		toSerialize["asyncResponseCallbackPath"] = o.AsyncResponseCallbackPath
	}
	if o.Deadline != nil {
		toSerialize["deadline"] = o.Deadline
	}
	return json.Marshal(toSerialize)
}

type NullableSfFnContext struct {
	value *SfFnContext
	isSet bool
}

func (v NullableSfFnContext) Get() *SfFnContext {
	return v.value
}

func (v *NullableSfFnContext) Set(val *SfFnContext) {
	v.value = val
	v.isSet = true
}

func (v NullableSfFnContext) IsSet() bool {
	return v.isSet
}

func (v *NullableSfFnContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSfFnContext(val *SfFnContext) *NullableSfFnContext {
	return &NullableSfFnContext{value: val, isSet: true}
}

func (v NullableSfFnContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSfFnContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


