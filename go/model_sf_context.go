/*
OpenAPI Schema for Salesforce Functions invocation contexts

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sffxschema

import (
	"encoding/json"
)

// SfContext struct for SfContext
type SfContext struct {
	ApiVersion string `json:"apiVersion"`
	PayloadVersion string `json:"payloadVersion"`
	UserContext UserContext `json:"userContext"`
}

// NewSfContext instantiates a new SfContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSfContext(apiVersion string, payloadVersion string, userContext UserContext) *SfContext {
	this := SfContext{}
	this.ApiVersion = apiVersion
	this.PayloadVersion = payloadVersion
	this.UserContext = userContext
	return &this
}

// NewSfContextWithDefaults instantiates a new SfContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSfContextWithDefaults() *SfContext {
	this := SfContext{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *SfContext) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *SfContext) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *SfContext) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetPayloadVersion returns the PayloadVersion field value
func (o *SfContext) GetPayloadVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayloadVersion
}

// GetPayloadVersionOk returns a tuple with the PayloadVersion field value
// and a boolean to check if the value has been set.
func (o *SfContext) GetPayloadVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PayloadVersion, true
}

// SetPayloadVersion sets field value
func (o *SfContext) SetPayloadVersion(v string) {
	o.PayloadVersion = v
}

// GetUserContext returns the UserContext field value
func (o *SfContext) GetUserContext() UserContext {
	if o == nil {
		var ret UserContext
		return ret
	}

	return o.UserContext
}

// GetUserContextOk returns a tuple with the UserContext field value
// and a boolean to check if the value has been set.
func (o *SfContext) GetUserContextOk() (*UserContext, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserContext, true
}

// SetUserContext sets field value
func (o *SfContext) SetUserContext(v UserContext) {
	o.UserContext = v
}

func (o SfContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["payloadVersion"] = o.PayloadVersion
	}
	if true {
		toSerialize["userContext"] = o.UserContext
	}
	return json.Marshal(toSerialize)
}

type NullableSfContext struct {
	value *SfContext
	isSet bool
}

func (v NullableSfContext) Get() *SfContext {
	return v.value
}

func (v *NullableSfContext) Set(val *SfContext) {
	v.value = val
	v.isSet = true
}

func (v NullableSfContext) IsSet() bool {
	return v.isSet
}

func (v *NullableSfContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSfContext(val *SfContext) *NullableSfContext {
	return &NullableSfContext{value: val, isSet: true}
}

func (v NullableSfContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSfContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


